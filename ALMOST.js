require("dotenv").config();
const { Bot, InlineKeyboard } = require("grammy");
const express = require("express");
const bodyParser = require("body-parser");
const crypto = require("crypto");
const stripe = require("stripe")(process.env.STRIPE_KEY); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
const fs = require("fs");
const axios = require("axios");
const connectDB = require("./database");
const Session = require("./sessionModel");

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY); // –í–∞—à API –∫–ª—é—á –æ—Ç Telegram –±–æ—Ç–∞

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
connectDB();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞
const loadMessages = () => {
  return JSON.parse(fs.readFileSync("messages.json", "utf8"));
};
const messages = loadMessages();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function generateUniqueId() {
  const maxId = 2147483647; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const minId = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  return (Date.now() % (maxId - minId + 1)) + minId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
function generatePaymentLink(paymentId, amount, email) {
  const shopId = process.env.ROBO_ID; // –õ–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –†–æ–±–æ–∫–∞—Å—Å–µ
  const secretKey1 = process.env.ROBO_SECRET1; // Secret Key 1 –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏

  const signature = crypto
    .createHash("md5")
    .update(`${shopId}:${amount}:${paymentId}:${secretKey1}`)
    .digest("hex");

  return `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${shopId}&OutSum=${amount}&InvId=${paymentId}&SignatureValue=${signature}&Email=${encodeURIComponent(
    email
  )}&IsTest=0`; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ https://auth.robokassa.ru/ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Price
async function createPrice() {
  const price = await stripe.prices.create({
    unit_amount: 1000, // 10 –µ–≤—Ä–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
    currency: "eur",
    product_data: {
      name: "Webinar Registration",
    },
  });
  return price.id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
async function createPaymentLink(priceId) {
  const paymentLink = await stripe.paymentLinks.create({
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
  });
  return paymentLink.url;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
async function sendToAirtable(name, email, phone, tgId, invId, prId) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const tableId = process.env.AIRTABLE_TABLE_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${tableId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      FIO: name,
      email: email,
      Phone: phone,
      tgId: tgId,
      Tag: "Webinar",
      inv_id: invId, // –î–æ–±–∞–≤–ª—è–µ–º inv_id
      price_id: prId,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(bodyParser.json()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram –∏ –†–æ–±–æ–∫–∞—Å—Å—ã

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  try {
    await Session.findOneAndUpdate(
      { userId: ctx.from.id.toString() },
      { userId: ctx.from.id.toString(), step: "start" },
      { upsert: true }
    );

    await ctx.reply(messages.start, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä", callback_data: "register" })
        .row()
        .add({ text: "–£–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ", callback_data: "info" }),
    });
  } catch (error) {
    if (error instanceof GrammyError && error.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: ${ctx.from.id}`);
    } else {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operator
bot.command("operator", async (ctx) => {
  try {
    await ctx.reply(
      "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ù–∏–∫–∏—Ç–µ: @IDC_Manager, –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç üòâ"
    );
  } catch (error) {
    if (error instanceof GrammyError && error.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: ${ctx.from.id}`);
    } else {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
bot.on("callback_query:data", async (ctx) => {
  try {
    const action = ctx.callbackQuery.data;
    const session = await Session.findOne({ userId: ctx.from.id.toString() });

    if (action === "register") {
      await ctx.reply(messages.enterName);
      session.step = "awaiting_name";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else if (action === "info") {
      await ctx.reply(messages.webinarInfo, {
        reply_markup: new InlineKeyboard().add({
          text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä",
          callback_data: "register_from_info",
        }),
      });
    } else if (action === "register_from_info") {
      await ctx.reply(messages.enterName);
      session.step = "awaiting_name";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else if (action === "edit_info") {
      await ctx.reply(messages.editChoice, {
        reply_markup: new InlineKeyboard()
          .add({ text: "–§–ò", callback_data: "edit_name" })
          .add({ text: "–¢–µ–ª–µ—Ñ–æ–Ω", callback_data: "edit_phone" })
          .add({ text: "E-mail", callback_data: "edit_email" }),
      });
      session.step = "awaiting_edit";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else if (action === "confirm_payment") {
      if (session.step === "awaiting_confirmation") {
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
          reply_markup: new InlineKeyboard()
            .add({ text: "–†–æ—Å—Å–∏–π—Å–∫–∞—è (990‚ÇΩ)", callback_data: "rubles" })
            .add({ text: "–ó–∞—Ä—É–±–µ–∂–Ω–∞—è (10‚Ç¨)", callback_data: "euros" }),
        });
        session.step = "awaiting_payment_type";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      }
    } else if (action === "rubles" || action === "euros") {
      const paymentId = await generateUniqueId();
      const priceId = await createPrice();
      const paymentLink = await createPaymentLink(priceId);
      session.newPrice = paymentLink.slice(23);
      session.paymentId = paymentId;

      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ paymentId

      if (action === "rubles") {
        const paymentLink = generatePaymentLink(paymentId, 990, session.email);
        await ctx.reply(
          `–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`
        );
      } else if (action === "euros") {
        try {
          await ctx.reply(
            `–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –µ–≤—Ä–æ. –ü—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`
          );
        } catch (error) {
          await ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
          );
        }
      }

      // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Airtable —Å inv_id
      await sendToAirtable(
        session.name,
        session.email,
        session.phone,
        ctx.from.id,
        session.paymentId, // –ü–µ—Ä–µ–¥–∞–µ–º inv_id
        session.newPrice
      );

      // –û—á–∏—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
      session.step = "completed";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    } else if (action.startsWith("edit_")) {
      session.step = `awaiting_edit_${action.replace("edit_", "")}`;
      await ctx.reply(
        messages[
          `enter${
            action.replace("edit_", "").charAt(0).toUpperCase() +
            action.replace("edit_", "").slice(1)
          }`
        ]
      );
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    }
  } catch (error) {
    if (error instanceof GrammyError && error.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: ${ctx.from.id}`);
    } else {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
bot.on("message:text", async (ctx) => {
  try {
    const session = await Session.findOne({ userId: ctx.from.id.toString() });

    if (session.step === "awaiting_name") {
      session.name = ctx.message.text;
      await ctx.reply(messages.enterPhone);
      session.step = "awaiting_phone";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else if (session.step === "awaiting_phone") {
      const phone = ctx.message.text;
      if (/^\+\d+$/.test(phone)) {
        session.phone = phone;
        await ctx.reply(messages.enterEmail);
        session.step = "awaiting_email";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      } else {
        await ctx.reply(messages.invalidPhone);
      }
    } else if (session.step === "awaiting_email") {
      session.email = ctx.message.text;
      const confirmationMessage = messages.confirmation
        .replace("{{ $–§–ò }}", session.name)
        .replace("{{ $Tel }}", session.phone)
        .replace("{{ $email }}", session.email);

      await ctx.reply(confirmationMessage, {
        reply_markup: new InlineKeyboard()
          .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
          .row()
          .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
      });

      session.step = "awaiting_confirmation";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else if (session.step === "awaiting_confirmation") {
      if (ctx.message.text === "–í—Å–µ –≤–µ—Ä–Ω–æ") {
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
          reply_markup: new InlineKeyboard()
            .add({ text: "–†–æ—Å—Å–∏–π—Å–∫–∞—è (990‚ÇΩ)", callback_data: "rubles" })
            .add({ text: "–ó–∞—Ä—É–±–µ–∂–Ω–∞—è (10‚Ç¨)", callback_data: "euros" }),
        });
        session.step = "awaiting_payment_type";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      }
    } else if (session.step.startsWith("awaiting_edit_")) {
      const field = session.step.replace("awaiting_edit_", "");
      if (field === "name") {
        session.name = ctx.message.text;
      } else if (field === "phone") {
        const phone = ctx.message.text;
        if (/^\+\d+$/.test(phone)) {
          session.phone = phone;
        } else {
          await ctx.reply(messages.invalidPhone);
          return;
        }
      } else if (field === "email") {
        session.email = ctx.message.text;
      }

      const confirmationMessage = messages.confirmation
        .replace("{{ $–§–ò }}", session.name)
        .replace("{{ $Tel }}", session.phone)
        .replace("{{ $email }}", session.email);

      await ctx.reply(confirmationMessage, {
        reply_markup: new InlineKeyboard()
          .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
          .row()
          .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
      });

      session.step = "awaiting_confirmation";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    }
  } catch (error) {
    if (error instanceof GrammyError && error.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: ${ctx.from.id}`);
    } else {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
